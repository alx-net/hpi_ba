input {
    pipeline {
        address => "pipeline_statement"
    }
}

filter {
    grok {
		match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:timezone} \[%{NUMBER:pid}\] %{WORD:username}@%{WORD:database} %{WORD:log_level}:  duration: %{NUMBER:duration:float} ms  statement:\s+%{GREEDYDATA:query}" }
		tag_on_failure => ["_grokparsefailure"]
	}

	if "_grokparsefailure" in [tags] {
		drop { }
	}

    date {
        match => ["timestamp", "YYYY-MM-dd HH:mm:ss.SSS"]
        target => "timestamp"
    }

	grok {
		match => { "[query]" => "/\* (?<query_comment>\{.*?\}) \*/" }
		tag_on_failure => []
        add_tag => [ 'query_comment' ]
	}

	if "query_comment" in [tags] {
		json {
			source => "query_comment"
			target => "query_comment_json"
			tag_on_failure => ["_jsonparsefailure"]
		}

		if "_jsonparsefailure" in [tags] {
			drop { }
		}
	}

	mutate { 
        remove_field => [
            "json_part",
            "message",
			"query_comment",
			"event",
			"log",
            "query",
            "log_level"
        ]
   }
}



output {
	stdout {
		codec => rubydebug
	}

    elasticsearch {
		hosts => [ "${ELASTIC_HOST}" ]
		index => "postgres-statement-test-index"
		ssl_certificate_verification => false
		api_key => "${ELASTIC_API_KEY}"
	}
}