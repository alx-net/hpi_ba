input {
    pipeline {
        address => "pipeline_plan"
    }
}

filter {
	grok {
		match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:timezone} \[%{NUMBER:pid}\] %{WORD:username}@%{WORD:database} %{WORD:log_level}:  duration: %{NUMBER:duration:float} ms  plan:%{GREEDYDATA:json_part}" }
		tag_on_failure => ["_grokparsefailure"]
	}

	if "_grokparsefailure" in [tags] {
		drop { }
	}

	date {
        match => ["timestamp", "YYYY-MM-dd HH:mm:ss.SSS"]
        target => "timestamp"
    }

	json {
		source => "json_part"
		target => "plan"
		tag_on_failure => ["_jsonparsefailure"]
	}
	

	if "_jsonparsefailure" in [tags] {
		drop { }
	}

	grok {
		match => { "[plan][Query Text]" => "/\* (?<query_comment>\{.*?\}) \*/" }
		tag_on_failure => []
		add_tag => [ "query_comment" ]
	}

	if "query_comment" in [tags] {
		json {
			source => "query_comment"
			target => "query_comment_json"
			tag_on_failure => ["_jsonparsefailure"]
		}

		if "_jsonparsefailure" in [tags] {
			drop { }
		}
	}

	mutate { 
        remove_field => [
            "json_part",
            "message",
			"query_comment",
			"event",
			"log",
			"log_level"
        ]
   }

}

output {
	stdout {
		codec => rubydebug
	}

	elasticsearch {
		hosts => [ "https://localhost:9200" ]
		index => "postgres-plan-test-index"
		ssl_certificate_verification => false
		api_key => "tWMKCJABH-fSsWDtZxzj:XMyEcpzfS5mceSi6XFuY5Q"
	}
}